import os
import numpy as np
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]="-1"
from keras.utils import np_utils
from keras.datasets import mnist

def load_mnist(x_style='gray', normalize_x=True, categorize_y=True):
    """load_mnist

    x_style in ['no_channel', 'one_channel', 'three_channels', 'flat']
        'no_channel': x_train.shape = (n_samples, 28, 28)
        'one_channel': x_train.shape = (n_samples, 28, 28, 1)
        'three_channels': x_train.shape = (n_samples, 28, 28, 3): the last axis is generated by simple duplication
        'flat': x_train.shape = (n_samples, 28 * 28)
    normalize_x: if True, the range of x_train and x_test will be from 0 to 1
    categorize_y: if True, y_train and y_test will be one-hot vectors
    """
    (x_train, y_train), (x_test, y_test) = mnist.load_data()
    x_train = x_train.astype(np.float32)
    x_test  = x_test.astype(np.float32)
    if x_style == 'no_channel':
        pass
    elif x_style == 'flat':
        x_train = x_train.reshape(x_train.shape[0], x_train.shape[1]*x_train.shape[2])
        x_test = x_test.reshape(x_test.shape[0], x_test.shape[1]*x_test.shape[2])
    elif x_style == 'one_channel':
        x_train = x_train[:, :, :, np.newaxis]
        x_test = x_test[:, :, :, np.newaxis]
    elif x_style == 'three_channels':
        x_train = x_train[:, :, :, np.newaxis]
        x_test = x_test[:, :, :, np.newaxis]
        x_train = np.repeat(x_train, 3, axis=3)
        x_test = np.repeat(x_test, 3, axis=3)
    else:
        raise ValueError('x_style must be in [\'no_channel\', \'one_channel\', \'three_channels\', \'flat\']: {} assigned'.format(x_style))
    if normalize_x:
        x_train /= 255
        x_test  /= 255
    if categorize_y:
        n_classes = 10
        y_train = np_utils.to_categorical(y_train, n_classes)
        y_test = np_utils.to_categorical(y_test, n_classes)
    return (x_train, y_train), (x_test, y_test)
